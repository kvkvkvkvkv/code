1427. Perform String Shifts
Easy

128

1

Add to List

Share
You are given a string s containing lowercase English letters, and a matrix shift, where shift[i] = [directioni, amounti]:

directioni can be 0 (for left shift) or 1 (for right shift).
amounti is the amount by which string s is to be shifted.
A left shift by 1 means remove the first character of s and append it to the end.
Similarly, a right shift by 1 means remove the last character of s and add it to the beginning.
Return the final string after all operations.

 

Example 1:

Input: s = "abc", shift = [[0,1],[1,2]]
Output: "cab"
Explanation: 
[0,1] means shift to left by 1. "abc" -> "bca"
[1,2] means shift to right by 2. "bca" -> "cab"
Example 2:

Input: s = "abcdefg", shift = [[1,1],[1,1],[0,2],[1,3]]
Output: "efgabcd"
Explanation:  
[1,1] means shift to right by 1. "abcdefg" -> "gabcdef"
[1,1] means shift to right by 1. "gabcdef" -> "fgabcde"
[0,2] means shift to left by 2. "fgabcde" -> "abcdefg"
[1,3] means shift to right by 3. "abcdefg" -> "efgabcd"
 

Constraints:

1 <= s.length <= 100
s only contains lower case English letters.
1 <= shift.length <= 100
shift[i].length == 2
directioni is either 0 or 1.
0 <= amounti <= 100


O(n)
net shift

class Solution {
    public String stringShift(String s, int[][] shift) {
        
        int l=0;
        int r=0;
        
        for(int[] s1:shift){
            if(s1[0]==0){
                l+=s1[1];
            }else{
                r+=s1[1];   
            }
        }
        
        int diff = Math.abs(l-r);
        StringBuffer sb = new StringBuffer();
        int n = s.length();
        
        if(l>r){
            for(int i=0;i<n;i++){
                sb.append(s.charAt((i+diff)%n));
            }
        } else if(r>l){
            for(int i=0;i<n;i++){
                sb.append(s.charAt((i+(n-(diff%n)))%n));
            }
        }else{
            return s;
        }
        return sb.toString();
    }
}



//leet
class Solution {
  public String stringShift(String string, int[][] shift) {
    
    // Add up the left shifts and right shifts.
    int[] overallShifts = new int[2];
    for (int[] move : shift) {
      overallShifts[move[0]] += move[1];
    }
    int leftShifts = overallShifts[0];
    int rightShifts = overallShifts[1];
      
    // Determine which shift (if any) to perform.
    int len = string.length();
    if (leftShifts > rightShifts) {
      leftShifts = (leftShifts - rightShifts) % len;
      string = string.substring(leftShifts) + string.substring(0, leftShifts);
    }
    else if (rightShifts > leftShifts) {
      rightShifts = (rightShifts - leftShifts) % len;
      string = string.substring(len - rightShifts) + string.substring(0, len - rightShifts);
    }
    
    return string;
  }
}



