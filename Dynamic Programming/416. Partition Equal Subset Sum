416. Partition Equal Subset Sum
Medium

7918

126

Add to List

Share
Given a non-empty array nums containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.

 

Example 1:

Input: nums = [1,5,11,5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].
Example 2:

Input: nums = [1,2,3,5]
Output: false
Explanation: The array cannot be partitioned into equal sum subsets.
 

Constraints:

1 <= nums.length <= 200
1 <= nums[i] <= 100





Memoized 
class Solution {
    
    Boolean[][] map;
    
    public boolean canPartition(int[] nums) {
        int sum = 0;
        int len = nums.length;
        for(int ele:nums){
            sum += ele;
        }
        
        map = new Boolean[len+1][(sum/2)+1];
        
        if(sum%2 != 0){
            return false;
        }
        
        return partition(nums, sum/2, len);
    }
    
    boolean partition(int[] nums, int sum, int index){
        
        if(map[index][sum] != null){
            return map[index][sum];
        }
        
        if(sum == 0){
            return true;
        }
        
        if(index == 0){
            return false;
        }
        
        map[index][sum] = partition(nums, sum, index-1);
        if(nums[index-1] <= sum){
            map[index][sum] = partition(nums,sum-nums[index-1],index-1) || map[index][sum];
        }
        
        return map[index][sum];
        
    }
}




2D memoized 

class Solution {
    
    Boolean[][] map;
    
    public boolean canPartition(int[] nums) {
        int sum = 0;
        int len = nums.length;
        for(int ele:nums){
            sum += ele;
        }
        
        map = new Boolean[len+1][(sum/2)+1];
        
        if(sum%2 != 0){
            return false;
        }
        
        partition(nums, sum/2, len);
        return map[len][sum/2];
    }
    
    void partition(int[] nums, int sum, int index){
        
//         if(map[index][sum] != null){
//             return map[index][sum];
//         }
        
//         if(sum == 0){
//             return true;
//         }
        
//         if(index == 0){
//             return false;
//         }
        
//         map[index][sum] = partition(nums, sum, index-1);
//         if(nums[index-1] <= sum){
//             map[index][sum] = partition(nums,sum-nums[index-1],index-1) || map[index][sum];
//         }
        
//         return map[index][sum];
        
        for(int i=0;i<=index;i++){
            for(int j=0;j<=sum;j++){
                
                if(i==0 && j==0){
                    map[i][j] = true;
                    continue;
                }
                
                if(i==0){
                    map[i][j] = false;
                    continue;
                }
                
                if(j == 0){
                    map[i][j] = true;
                    continue;
                }
                
                if(nums[i-1]>j){
                    map[i][j] = map[i-1][j];
                }else{
                    map[i][j] = map[i-1][j] || map[i-1][j-nums[i-1]];
                }
            }
        }
    }
}







1D memoized 
class Solution {
    
    
    public boolean canPartition(int[] nums) {
        int sum = 0;
        int len = nums.length;
        for(int ele:nums){
            sum += ele;
        }
        
        boolean[] map = new boolean[(sum/2)+1];
        
        if(sum%2 != 0){
            return false;
        }
        
        partition(nums, sum/2, len, map);
        return map[sum/2];
    }
    
    void partition(int[] nums, int sum, int index, boolean[] map){
        
//         memo recur 
//         if(map[index][sum] != null){
//             return map[index][sum];
//         }
        
//         if(sum == 0){
//             return true;
//         }
        
//         if(index == 0){
//             return false;
//         }
        
//         map[index][sum] = partition(nums, sum, index-1);
//         if(nums[index-1] <= sum){
//             map[index][sum] = partition(nums,sum-nums[index-1],index-1) || map[index][sum];
//         }
        
//         return map[index][sum];
        
//         2d memo
//         for(int i=0;i<=index;i++){
//             for(int j=0;j<=sum;j++){
                
//                 if(i==0 && j==0){
//                     map[i][j] = true;
//                     continue;
//                 }
                
//                 if(i==0){
//                     map[i][j] = false;
//                     continue;
//                 }
                
//                 if(j == 0){
//                     map[i][j] = true;
//                     continue;
//                 }
                
//                 if(nums[i-1]>j){
//                     map[i][j] = map[i-1][j];
//                 }else{
//                     map[i][j] = map[i-1][j] || map[i-1][j-nums[i-1]];
//                 }
//             }
//         }
        
        
        
//         1d memo
        
        map[0] = true;
        
        
        for(int i=1;i<=index;i++){
            for(int j=sum; j>=0; j--){
                
                if(nums[i-1]<=j){
                    map[j] = map[j] || map[j-nums[i-1]];
                }
            }
        }
    }
}

