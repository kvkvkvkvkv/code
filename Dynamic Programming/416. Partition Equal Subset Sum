416. Partition Equal Subset Sum
Medium

7918

126

Add to List

Share
Given a non-empty array nums containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.

 

Example 1:

Input: nums = [1,5,11,5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].
Example 2:

Input: nums = [1,2,3,5]
Output: false
Explanation: The array cannot be partitioned into equal sum subsets.
 

Constraints:

1 <= nums.length <= 200
1 <= nums[i] <= 100





Memoized 
class Solution {
    
    Boolean[][] map;
    
    public boolean canPartition(int[] nums) {
        int sum = 0;
        int len = nums.length;
        for(int ele:nums){
            sum += ele;
        }
        
        map = new Boolean[len+1][(sum/2)+1];
        
        if(sum%2 != 0){
            return false;
        }
        
        return partition(nums, sum/2, len);
    }
    
    boolean partition(int[] nums, int sum, int index){
        
        if(map[index][sum] != null){
            return map[index][sum];
        }
        
        if(sum == 0){
            return true;
        }
        
        if(index == 0){
            return false;
        }
        
        map[index][sum] = partition(nums, sum, index-1);
        if(nums[index-1] <= sum){
            map[index][sum] = partition(nums,sum-nums[index-1],index-1) || map[index][sum];
        }
        
        return map[index][sum];
        
    }
}
