class Solution {
    int[] rank, root;
    public int countComponents(int n, int[][] edges) {
        rank = new int[n];
        root = new int[n];

        for(int i=0;i<n;i++) {
            rank[i] = 1;
            root[i] = i;
        }

        for(int[] ele: edges) {
            union(ele[0], ele[1]);
        }
        int count = 0;
        for(int i = 0;i<n;i++) {
            if(root[i]==i) {
                count++;
            }
        }
        return count;
    }

    int find(int x) {

        if(x == root[x]) {
            return x;
        }

        return root[x] = find(root[x]);
    }

    void union(int x, int y) {
        int rootX = find(x);
        int rootY = find(y);

        if(rootX != rootY) {

            if(rank[rootX]>rank[rootY]) {
                root[rootY] = rootX;
            } else if(rank[rootY] > rank[rootX]) {
                root[rootX] = rootY;
            } else {
                root[rootX] = rootY;
                rank[rootX]++;
            }
        }
    }
}




https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/
