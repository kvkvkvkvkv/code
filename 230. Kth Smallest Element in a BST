230. Kth Smallest Element in a BST
Medium

5459

107

Add to List

Share
Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.

 

Example 1:


Input: root = [3,1,4,null,2], k = 1
Output: 1
Example 2:


Input: root = [5,3,6,2,4,null,null,1], k = 3
Output: 3
 

Constraints:

The number of nodes in the tree is n.
1 <= k <= n <= 104
0 <= Node.val <= 104
 

Follow up: If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?


class Solution {
    public int kthSmallest(TreeNode root, int k) {
        Stack<TreeNode> s = new Stack();
        TreeNode cur = root;
        while(cur!=null || !s.isEmpty()){
            while(cur!=null){
                s.push(cur);
                cur = cur.left;
            }
            
            if(--k==0){
                return s.peek().val; 
            }
            cur = s.pop().right;
        }
        return 0;
    }
}








How to traverse the tree
There are two general strategies to traverse a tree:

Depth First Search (DFS)

In this strategy, we adopt the depth as the priority, so that one would start from a root and reach all the way down to certain leaf, and then back to root to reach another branch.

The DFS strategy can further be distinguished as preorder, inorder, and postorder depending on the relative order among the root node, left node and right node.

Breadth First Search (BFS)

We scan through the tree level by level, following the order of height, from top to bottom. The nodes on higher level would be visited before the ones with lower levels.

On the following figure the nodes are numerated in the order you visit them, please follow 1-2-3-4-5 to compare different strategies.

postorder

To solve the problem, one could use the property of BST : inorder traversal of BST is an array sorted in the ascending order.



Approach 1: Recursive Inorder Traversal
It's a very straightforward approach with O(N)O(N) time complexity. The idea is to build an inorder traversal of BST which is an array sorted in the ascending order. Now the answer is the k - 1th element of this array.

bla


Complexity Analysis

Time complexity : O(N)O(N) to build a traversal.
Space complexity : O(N)O(N) to keep an inorder traversal.

Approach 2: Iterative Inorder Traversal
The above recursion could be converted into iteration, with the help of stack. This way one could speed up the solution because there is no need to build the entire inorder traversal, and one could stop after the kth element.

bla


Complexity Analysis

Time complexity: O(H + k)O(H+k), where HH is a tree height. This complexity is defined by the stack, which contains at least H + kH+k elements, since before starting to pop out one has to go down to a leaf. This results in O(\log N + k)O(logN+k) for the balanced tree and O(N + k)O(N+k) for completely unbalanced tree with all the nodes in the left subtree.
Space complexity: O(H)O(H) to keep the stack, where HH is a tree height. That makes O(N)O(N) in the worst case of the skewed tree, and O(\log N)O(logN) in the average case of the balanced tree.

Follow up
What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?

Click here to learn how to insert a node into a BST and delete a node from a BST, the time complexity of these operations is O(H)O(H), where HH is a height of the binary tree. H = \log NH=logN for the balanced tree and H = NH=N for a skewed tree.

Hence without any optimisation insert/delete + search of kth element has O(2H + k)O(2H+k) complexity. How to optimise that?

That's a design question, basically we're asked to implement a structure which contains a BST inside and optimises the following operations :

Insert

Delete

Find kth smallest

Seems like a database description, isn't it? Let's use here the same logic as for LRU cache design, and combine an indexing structure (we could keep BST here) with a double linked list.

Such a structure would provide:

O(H)O(H) time for the insert and delete.

O(k)O(k) for the search of kth smallest.

bla

The overall time complexity for insert/delete + search of kth smallest is O(H + k)O(H+k) instead of O(2H + k)O(2H+k).

Complexity Analysis

Time complexity for insert/delete + search of kth smallest: O(H + k)O(H+k), where HH is a tree height. O(\log N + k)O(logN+k) in the average case, O(N + k)O(N+k) in the worst case.

Space complexity : O(N)O(N) to keep the linked list.
